
                                                   
مستند کلاس LEXER

توضیحات کلاس:
    کلاس LEXER برای استفاده به عنوان لکسر (lexer) برای یک زبان برنامه‌نویسی سفارشی با استفاده از کتابخانه ply.lex طراحی شده است.

ویژگی‌های کلاس:
    - lexer: یک نمونه از لکسر که با استفاده از ply.lex ایجاد شده است.

متد‌های کلاس:

1. __init__(self):
    - توضیح: سازنده کلاس که لکسر را با استفاده از ply.lex مقداردهی اولیه می‌کند.

توجه: این کلاس برای تجزیه و تحلیل لغوی یک زبان برنامه‌نویسی سفارشی طراحی شده است. لکسر با استفاده از کتابخانه ply.lex ایجاد شده است که ابزارهایی برای ساختن لکسرها در پایتون فراهم می‌کند.
**********************************************************************************                                                         
لیست توکن‌ها:
    - 'NUMBER': تعداد
    - 'PLUS': جمع
    - 'MINUS': تفاضل
    - 'TIMES': ضرب
    - 'DIVIDE': تقسیم
    - 'LPAREN': پرانتز باز
    - 'RPAREN': پرانتز بسته
    - 'ID': شناسه
    - 'ASSIGN': اختصاص
    - 'LBRACKET': پرانتز زیرین باز
    - 'RBRACKET': پرانتز زیرین بسته
    - 'LT': کمتر از
    - 'GT': بیشتر از
    - 'LE': کمتر یا مساوی
    - 'GE': بیشتر یا مساوی
    - 'NE': ناهمسانی
    - 'EQUAL': مساوی
    - 'SEMICOL': نقطه‌ویرگول
    - 'STRING': رشته
**********************************************************************************  
کلمات رزرو شده:
    - 'ELIF': elif
    - 'ELSE': else
    - 'TWOP': :
    - 'FLOAT': ashar
    - 'INT': sahih
    - 'IF': agar
    - 'PRINT': chap
    - 'INPUT': begir
    - 'CLASS': class
    - 'VOID': void
**********************************************************************************       
تابع توکن‌گیری برای شناسه‌ها (IDs):

تابع t_ID(self, t):
    - توضیح: این تابع برای توکن‌گیری از شناسه‌ها (IDs) و کلمات رزرو شده استفاده می‌شود.
    - الگوی توکن‌گیری: :|[a-zA-Z_][a-zA-Z_0-9]*
        - این الگو به معنای شناسه‌ها که با یک نقطه (:) یا یک حرف شروع می‌شوند و می‌توانند شامل حروف، اعداد، و آندرلاین (_) باشند.
    - پارامترها:
        - t: شیء توکن.

نکته: تایپ توکن به شکل تعیین شده در لیست توکن‌ها (tokens) یا به عنوان شناسه (ID) در صورت کلمات رزرو شده می‌شود.
**********************************************************************************                                                 
قوانین عبارات منظم برای عملگرها:

    - t_PLUS: جمع
        - الگوی عبارت منظم: \+
    
    - t_MINUS: تفاضل
        - الگوی عبارت منظم: \-
    
    - t_TIMES: ضرب
        - الگوی عبارت منظم: \*
    
    - t_DIVIDE: تقسیم
        - الگوی عبارت منظم: /
    
    - t_LPAREN: پرانتز باز
        - الگوی عبارت منظم: \(
    
    - t_RPAREN: پرانتز بسته
        - الگوی عبارت منظم: \(
**********************************************************************************                                                   
تابع printList:

تابع printList(self):
    - توضیح: این تابع لیست کلمات رزرو شده را چاپ می‌کند.
    - پارامترها:
        - self: اشاره‌گر به خود کلاس.

نکته: این تابع برای چاپ کلمات رزرو شده که در دیکشنری reserved ذخیره شده‌اند، به کار می‌رود.
**********************************************************************************                                                 
توابع توکن‌گیری برای عملگرها و توکن‌های ویژه

1. تابع `t_NOT(self, t)`:
    -  الگوی توکن‌گیری:  `not`
    -  نوع توکن:  'NOT'
    -  عملکرد:  اگر در ورودی عبارت `not` وجود داشته باشد، آن را به عنوان توکن با نوع "NOT" شناسایی کرده و به توکن اضافه می‌کند.

2. تابع `t_EQUAL(self, t)`:
    -  الگوی توکن‌گیری:  `==`
    -  نوع توکن:  'EQUAL'
    -  عملکرد:  اگر در ورودی عبارت `==` وجود داشته باشد، آن را به عنوان توکن با نوع "EQUAL" شناسایی کرده و به توکن اضافه می‌کند.

3. تابع `t_GE(self, t)`:
    -  الگوی توکن‌گیری:  `>=`
    -  نوع توکن:  'GE' (بزرگتر مساوی)
    -  عملکرد:  اگر در ورودی عبارت `>=` وجود داشته باشد، آن را به عنوان توکن با نوع "GE" شناسایی کرده و به توکن اضافه می‌کند.

4. تابع `t_LE(self, t)`:
    -  الگوی توکن‌گیری:  `<=`
    -  نوع توکن:  'LE' (کمتر مساوی)
    -  عملکرد:  اگر در ورودی عبارت `<=` وجود داشته باشد، آن را به عنوان توکن با نوع "LE" شناسایی کرده و به توکن اضافه می‌کند.

5. تابع `t_NE(self, t)`:
    -  الگوی توکن‌گیری:  `!=`
    -  نوع توکن:  'NE' (ناهمسانی)
    -  عملکرد:  اگر در ورودی عبارت `!=` وجود داشته باشد، آن را به عنوان توکن با نوع "NE" شناسایی کرده و به توکن اضافه می‌کند.

6. تابع `t_LT(self, t)`:
    -  الگوی توکن‌گیری:  `<`
    -  نوع توکن:  'LT' (کمتر از)
    -  عملکرد:  اگر در ورودی عبارت `<` وجود داشته باشد، آن را به عنوان توکن با نوع "LT" شناسایی کرده و به توکن اضافه می‌کند.

7. تابع `t_GT(self, t)`:
    -  الگوی توکن‌گیری:  `>`
    -  نوع توکن:  'GT' (بیشتر از)
    -  عملکرد:  اگر در ورودی عبارت `>` وجود داشته باشد، آن را به عنوان توکن با نوع "GT" شناسایی کرده و به توکن اضافه می‌کند.

8. تابع `t_SEMICOL(self, t)`:
    -  الگوی توکن‌گیری:  `;`
    -  نوع توکن:  'SEMICOL' (نقطه‌ویرگول)
    -  عملکرد:  اگر در ورودی عبارت `;` وجود داشته باشد، آن را به عنوان توکن با نوع "SEMICOL" شناسایی کرده و به توکن اضافه می‌کند.

9. تابع `t_STRING(self, t)`:
   

 -  الگوی توکن‌گیری:  `"[a-zA-Z]*"`
    -  نوع توکن:  'STRING' (رشته)
    -  عملکرد:  اگر در ورودی یک رشته با الگوی مشخص (که با `"` شروع شده و تا حروف بزرگ و کوچک ادامه دارد) وجود داشته باشد، آن را به عنوان توکن با نوع "STRING" شناسایی کرده و به توکن اضافه می‌کند.

10. تابع `t_ASSIGN(self, t)`:
    -  الگوی توکن‌گیری:  `=`
    -  نوع توکن:  'ASSIGN' (اختصاص)
    -  عملکرد:  اگر در ورودی عبارت `=` وجود داشته باشد، آن را به عنوان توکن با نوع "ASSIGN" شناسایی کرده و به توکن اضافه می‌کند.

11. تابع `t_LRACKET(self, t)`:
    -  الگوی توکن‌گیری:  `{`
    -  نوع توکن:  'LBRACKET' (پرانتز زیرین باز)
    -  عملکرد:  اگر در ورودی عبارت `{` وجود داشته باشد، آن را به عنوان توکن با نوع "LBRACKET" شناسایی کرده و به توکن اضافه می‌کند.

12. تابع `t_RBRACKET(self, t)`:
    -  الگوی توکن‌گیری:  `}`
    -  نوع توکن:  'RBRACKET' (پرانتز زیرین بسته)
    -  عملکرد:  اگر در ورودی عبارت `}` وجود داشته باشد، آن را به عنوان توکن با نوع "RBRACKET" شناسایی کرده و به توکن اضافه می‌کند.

13. تابع `t_NUMBER(self, t)`:
    -  الگوی توکن‌گیری:  `\d+`
    -  نوع توکن:  'NUMBER' (تعداد)
    -  عملکرد:  اگر در ورودی یک عدد وجود داشته باشد، آن را به عنوان توکن با نوع "NUMBER" و مقدار عدد شناسایی می‌کند.
**********************************************************************************  
توابع دیگر در کلاس

1. تابع `t_newline(self, t)`:
    - الگوی توکن‌گیری: `\n+`
    - عملکرد:** این تابع برای شمارش تعداد خطوط در ورودی استفاده می‌شود. هر بار که یک خط جدید در ورودی یافت شود (`\n+` به معنای یک یا چند خط جدید)، تعداد خطوط را افزایش داده و این اطلاعات را در متغیر lineno توکن ذخیره می‌کند.

2. تابع `t_ignore(self, t)`:
    - الگوی توکن‌گیری:** `' \t'`
    - عملکرد:** این تابع برای صرف‌نظر کردن از فاصله و تب در ورودی استفاده می‌شود. یعنی این کاراکترها در توکن‌ها لحاظ نمی‌شوند.

3. تابع `t_error(self, t)`:
    - عملکرد: این تابع برای کنترل خطا در صورت وجود کاراکترهای غیرمجاز در ورودی استفاده می‌شود. در صورت وجود چنین کاراکترهایی، پیام خطا به همراه کاراکتر غیرمجاز چاپ شده و یک کاراکتر از ورودی حذف می‌شود.
**********************************************************************************  
در این قسمت از کد، توابع دیگری برای مدیریت فایل‌ها و اجرای تست اضافه شده‌اند

1. تابع `append_multiple_lines(self, file_name, lines_to_append)`:
    - ورودی:
        - `file_name`: نام فایلی که به آن خطوط جدید اضافه می‌شود.
        - `lines_to_append`: لیست خطوطی که باید به فایل اضافه شوند.
    - عملکرد:
        - این تابع خطوط جدید را به یک فایل اضافه می‌کند.
        - در ابتدا فایل با حالت "a+" باز می‌شود تا اگر فایل وجود نداشته باشد، ساخته شود.
        - سپس چک می‌شود که آیا فایل خالی است یا نه. اگر خالی نباشد، یک خط جدید (`\n`) به عنوان جداکننده بین خطوط اضافه می‌شود.
        - سپس هر خط جدید از لیست `lines_to_append` به فایل اضافه می‌شود.

2. تابع `read_input_file(self, file_name)`:
    - ورودی:
        - `file_name`: نام فایلی که از آن خوانده می‌شود.
    - خروجی:
        - متن خوانده شده از فایل.
    - عملکرد:
        - این تابع یک فایل را باز کرده و محتوای آن را خوانده و به عنوان یک رشته باز می‌گرداند.

3. تابع `test(self)`:
    - عملکرد:
        - این تابع یک تست انجام می‌دهد. ابتدا فایل خروجی را خالی می‌کند.
        - سپس محتوای فایل ورودی را می‌خواند.
        - توکن‌ها را با استفاده از تابع `input` از کلاس lexer استخراج می‌کند و به فایل خروجی اضافه می‌کند.
**********************************************************************************  
# این قسمت برای اجرای تست و چاپ پیام به کاربر است.

1. `lexer = LEXER()`: یک نمونه از کلاس `LEXER` ایجاد می‌شود.

2. `lexer.test()`: تابع `test` از کلاس `LEXER` فراخوانی می‌شود. این تابع اقدام به خواندن فایل ورودی (`input.txt`) می‌کند، توکن‌ها را با استفاده از lexer استخراج می‌کند و در فایل خروجی (`output.txt`) ذخیره می‌کند.

3. `print("Check out the output.txt")`: پیام به کاربر چاپ می‌شود تا او بداند که محتوای خروجی در فایل `output.txt` قرار دارد.
